{
  "name": "ribcage-view",
  "version": "0.0.7",
  "description": "A simple base Backbone view class that adds subviews, rendering, and initialization. ",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Techwraith/ribcage-view.git"
  },
  "keywords": [
    "Backbone",
    "view",
    "subview",
    "browserify"
  ],
  "author": {
    "name": "Techwraith"
  },
  "license": "MIT",
  "dependencies": {
    "backbone": "~1.0.0",
    "lodash": "~1.2.1",
    "jquery-browserify": "~1.8.1"
  },
  "readme": "ribcage-view\n===========\n\nA simple base Backbone view class that adds subviews, rendering, and initialization.\n\n### Examples\n\n```js\nvar View = require('ribcage-view');\n\n/*\n * A view that doesn't do anything but render a template\n *\n * - a template is just a function that takes an object\n *   and returns a string to be rendered.\n *\n * - all options that are passed into the view will also\n *   be passed into the template\n *\n */\nvar templateView = new View({\n  template: templateFunction\n, thing: 'will be passed to the template'\n});\n\n// Extending a ribcage-view\nvar MyView = View.extend({\n\n  beforeInit: function (opts) {\n    // gets called before initialization\n  }\n\n, afterInit: funciton (opts) {\n    // gets called after initialization\n  }\n\n, template: function (context) {\n    // return a string to be rendered\n  }\n\n, context: function () {\n    // define a context for the template\n  }\n\n, beforeRender: function () {\n    // gets called before it's rendered\n  }\n\n, afterRender: function () {\n    // gets called after it's rendered\n  }\n\n});\n\n// Working with subviews\nvar ViewWithSubviews = View.extend({\n\n  beforeRender: function () {\n    // append a view to this view's $el\n    this.myView = new MyView();\n    this.appendSubview(myView);\n\n    // append a view to a specific place in this $el\n    this.appendSubview(new MyView(), '#put-it-here');\n\n    // go through all the subviews\n    this.eachSubview: function (function (subview) {\n      subview.doSomething();\n    });\n\n    // detatch a subview\n    this.detatchSubview(this.myView);\n\n    // close all subviews\n    this.closeSubviews();\n\n  }\n\n});\n\n```\n\n### Install\n\nInstalling via npm is easy:\n\n```\nnpm install ribcage-view\n```\n\nRibcage requires you to use browserify (or some other way to get require on the front-end).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Techwraith/ribcage-view/issues"
  },
  "_id": "ribcage-view@0.0.7",
  "_from": "ribcage-view@0.0.x"
}
