{
  "author": {
    "name": "Ben Ng",
    "email": "me@benng.me",
    "url": "http://benng.me"
  },
  "name": "js-thumb",
  "description": "Client-side video & image thumbnailing",
  "keywords": [
    "video",
    "image",
    "browserify",
    "thumbnail"
  ],
  "version": "0.0.13",
  "repository": {
    "type": "git",
    "url": "git://github.com/ben-ng/js-thumb.git"
  },
  "main": "./lib/js-thumb",
  "dependencies": {
    "videojs": "0.0.x"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "jake": "latest",
    "utilities": "latest",
    "envoy": "latest",
    "watchr": "2.3.3",
    "qunit": "~0.5.15",
    "grunt-contrib-qunit": "~0.2.1",
    "qunitjs": "~1.11.0"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "0.10.x"
  },
  "readme": "#JS-Thumb\n\nThumbnail all the things, client-side!\n\n\n##Demo\n\n[Live demo](http://ben-ng.github.io/js-thumb)\n\n\n##Usage\n\n```javascript\nvar jsthumb = require(\"jsthumb\")\n  //When taking a screenshot from a video, it's best to supply the original dimensions of the video\n  , screenshotOpts = {\n      origWidth: 400\n    , origHeight: 400\n    }\n  //When resizing, you have to specify a maxWidth and maxHeight, and the original dimensions are recommended but optional\n  , resizingOpts = {\n      origWidth: 400\n    , origHeight: 400\n    , maxWidth:200\n    , maxHeight:200\n    }\n  //All these methods return a Base64 encoded string\n  , videoThumbnail = jsthumb.screenshot(document.getElementById(\"my_video_tag\"), screenshotOpts)\n  , imageThumbnail = jsthumb.resize(document.getElementById(\"my_image_tag\"), resizingOpts);\n\n\n//You can also directly resize Base64 encoded data, but you'll need to provide a callback for that\njsthumb.resizeData(imageData, opts, function(err, base64Data) {\n  //Do something with base64Data\n});\n\n//To load thumbnails in the browser\nvar myImage = new Image();\nmyImage.src = videoThumbnail;\n```\n\n\n##Loading Media\n\nIt's not trivial figuring out when a video element is ready for thumbnailing. To remedy this problem, we provide a helper method that loads a video and fires a callback when it's ready for use.\n\n```javascript\nvar videoOpts = {\n    sources: [\n      {\n        src: \"media/lego.mp4\"\n      , type: \"video/mp4\"\n      }\n    ]\n  , attributes: {\n      //Required, must be unique for each element\n      id: \"example_video\"\n      \n      // Optional, will resize video to fit parent element, maintaining aspect ratio\n    , resize: true\n    }\n  };\n\n//Appends the video to the body of the page\njsthumb.loadVideo(document.body, videoOpts, function (err, element, player, supported) {\n  var video = $(element).find(\"video\")[0];\n  \n  //This is the container div with all the Video.js controls\n  ok(element, \"Video container exists\");\n  \n  //This is the actual video tag\n  ok(video, \"Video element exists\");\n  \n  //This is the Video.js player\n  ok(player, \"Player exists\");\n  \n  //This tells you whether or not thumbnailing is supported\n  ok(supported, \"Thumbnailing is available\");\n});\n```\n\nYou can use `.loadVideo` to load the same video file multiple times on your page, just remember to set a different `id` attribute for each one.\n\n##Broken?\n\n###HTML5 Video\nJS-Thumb relies on the HTML5 `<video>` tag. Firefox and Opera at this time of writing do not support playing `.mp4` videos with the `<video>` tag. If you use `.loadVideo` then these browsers will fall back to the flash player, which does not support thumbnailing.\n\n###Mobile\nThumbnailing on iOS and Android devices is not supported at this time due to browser limitations. `.loadVideo` will still create a playable video, however.\n\n##CI\nWe're [broken](https://travis-ci.org/ben-ng/js-thumb) on Travis-CI because PhantomJS does not yet support media like video and audio. If you have an idea of how to overcome this, I'm all ears!\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ben-ng/js-thumb/issues"
  },
  "_id": "js-thumb@0.0.13",
  "_from": "js-thumb@0.0.13",
  "dist": {
    "shasum": "392242f0ea195efed9ec760d9c3c08ff6e442556"
  },
  "_resolved": "https://registry.npmjs.org/js-thumb/-/js-thumb-0.0.13.tgz"
}
