{
  "name": "uglifyify",
  "version": "0.0.1",
  "description": "A browserify transform which minifies your code using UglifyJS2",
  "main": "index.js",
  "dependencies": {
    "uglify-js": "~1.3.4",
    "through": "~2.3.4"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/uglifyify.git"
  },
  "keywords": [
    "uglify",
    "minify",
    "compress",
    "compile",
    "browserify",
    "transform",
    "stream"
  ],
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com/"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "# uglifyify\n\nA [Browserify](http://browserify.org) v2 transform which minifies your code\nusing [UglifyJS2](https://github.com/mishoo/UglifyJS).\n\n## Installation\n\n``` bash\nnpm install uglifyify\n```\n\n## Motivation/Usage\n\nOrdinarily you'd be fine doing this:\n\n``` bash\nbrowserify index.js | uglifyjs -c > bundle.js\n```\n\nBut uglifyify gives you the benefit applying Uglify's \"squeeze\" transform\n*before* it's processed by Browserify, meaning you can remove dead code paths\nfor conditional requires. Here's a contrived example:\n\n``` javascript\nif (true) {\n  module.exports = require('./browser')\n} else {\n  module.exports = require('./node')\n}\n```\n\n`module.exports = require('./node')` will be excluded by Uglify, meaning that\nonly `./browser` will be bundled and required.\n\nIf you combine uglifyify with [envify](http://github.com/hughsk/envify), you\ncan make this a little more accessible. Take this code:\n\n``` javascript\nif (process.env.NODE_ENV === 'development') {\n  module.exports = require('./development')\n} else {\n  module.exports = require('./production')\n}\n```\n\nAnd use this to compile:\n\n``` bash\nNODE_ENV=development browserify -t envify -t uglifyify index.js -o dev.js &&\nNODE_ENV=production browserify -t envify -t uglifyify index.js -o prod.js\n```\n\nIt should go without saying that you should be hesitant using environment\nvariables in a Browserify module - this is best suited to your own\napplications or modules built with Browserify's `--standalone` tag.\n",
  "bugs": {
    "url": "https://github.com/hughsk/uglifyify/issues"
  },
  "_id": "uglifyify@0.0.1",
  "_from": "uglifyify@0.0.x"
}
